# Copyright (c) TOGGL LLC
# All rights reserved.
# Published under New BSD license

# This file provides:

# init_d_refresh - start init.d script if not started, else force-reload
# logrotate_for - adds common log-rotate to path
# package_installed - apt-get install only if not installed
# role_required - fails unless role given as argument is installed
# run_file_as_user - runs executable as other user, fixing file permissions
# save_heredoc_in - puts heredoc into file and adds file to tracking list
# syslog_tag_rotate - directs syslog tag to separate file and log rotates it
# track_path - adds file to tracking list
# upstart_sudo_launcher - sudoers file allowing use single service upstart

set -o pipefail # trace ERR through pipes
set -o errtrace # trace ERR through functions
set -o nounset  # fail if used unuset variable
set -o errexit  # abort on first unsucessfull line

# This file contains helpers for role manager.
# following two variables must be set before including fhis file:
[[ -z "${TOGGL_ROLE_NAME}" ]] && (echo 'Must set TOGGL_ROLE_NAME before sourcing'; exit 99)
[[ -z "${TOGGL_ROLE_VERSION}" ]] && (echo 'Must set TOGGL_ROLE_VERSION before sourcing'; exit 99)

### Config
TOGGL_ROLE_FAILED_MESSAGE=${TOGGL_ROLE_FAILED_MESSAGE:-'Failed install'}

TOGGL_ROLE_CONFIG_PATH=${TOGGL_ROLE_CONFIG_PATH:-'/opt/toggl/scripting/etc'}
TOGGL_ROLE_NOTIFIER=${TOGGL_ROLE_NOTIFIER:-'/usr/bin/team_notify'}

TOGGL_ROLES_PATH=${TOGGL_ROLES_PATH:-"${TOGGL_ROLE_CONFIG_PATH}/roles"}
TOGGL_ROLE_FILES_PATH=${TOGGL_ROLE_FILES_PATH:-"${TOGGL_ROLE_CONFIG_PATH}/files"}

TOGGL_ROLE_VERSION_FILE="${TOGGL_ROLES_PATH}/${TOGGL_ROLE_NAME}"
TOGGL_ROLE_FILE_LIST="${TOGGL_ROLE_FILES_PATH}/${TOGGL_ROLE_NAME}"

PREVIOUS_ROLE_VERSION='(none)'

### Housekeeping
mkdir -vp "${TOGGL_ROLES_PATH}"
mkdir -vp "${TOGGL_ROLE_FILES_PATH}"

# Terminate early
if [ -f "${TOGGL_ROLE_VERSION_FILE}" ] ; then
  PREVIOUS_ROLE_VERSION=$(cat "${TOGGL_ROLE_VERSION_FILE}")
  if [ ! "{TOGGL_ROLE_VERSION}"='*' ]; then
    if [ "${TOGGL_ROLE_VERSION}" == "${PREVIOUS_ROLE_VERSION}" ]; then
      echo "${TOGGL_ROLE_NAME}-${TOGGL_ROLE_VERSION} is already installed, exiting"
      exit 0
    fi
  fi
fi

# Empty tracklist from previous runs
[ -f "${TOGGL_ROLE_FILE_LIST}" ] && rm -v "${TOGGL_ROLE_FILE_LIST}"
# Assume we don't finish
echo "${TOGGL_ROLE_FAILED_MESSAGE}" > "${TOGGL_ROLE_VERSION_FILE}"

###  public api, every proc has arguments re-mapped to local's

init_d_refresh() {
  local script_name=${1}

  (/etc/init.d/${script_name} status && /etc/init.d/${script_name} force-reload) || true
  /etc/init.d/${script_name} status || /etc/init.d/${script_name} start
}

logrotate_for() {
  local service_name=${1}
  local log_path=${2}
  local postrotate_command=${3:-'true'}

  save_heredoc_in "/etc/logrotate.d/${service_name}.conf" <<-CONFIG
${log_path} {
  daily
  missingok
  rotate 14
  compress
  delaycompress
  notifempty
  minsize 200M
  sharedscripts
  postrotate
     ${postrotate_command}
  endscript
}
CONFIG
}

package_installed() {
  # package names as arguments

  for package_name in "$@"
  do
    dpkg --status ${package_name} >/dev/null || apt-get install ${package_name}
  done
}

role_required() {
  local role_name=${1}
  local role_path="${TOGGL_ROLES_PATH}/${role_name}"

 if [ -f "${role_path}" ]; then
   if [ "${TOGGL_ROLE_FAILED_MESSAGE}" == "$(cat "${role_path}")" ]; then
     >&2 echo "Role ${role_name} is in failed state"
     exit 10
   fi
   echo "Role ${role_name} $(cat ${role_path}) detected"
 else
   >&2 echo "Role ${role_name} must be installed first"
   exit 10
 fi
}

run_file_as_user(){
  local file_to_run=${1}
  local target_user=${2}

  local current_path=$(pwd)
  cd $(dirname ${file_to_run})

  chmod a+x ${file_to_run}
  chown ${target_user} ${file_to_run}
  sudo -iu ${target_user} ${file_to_run}

  cd ${current_path}
}

save_heredoc_in(){
  local target_file=${1}

  mkdir -vp "$(dirname ${target_file})"
  track_path "${target_file}"
  cat - > "${target_file}"
}

syslog_tag_rotate(){
  local syslog_tag=${1}

  save_heredoc_in "/etc/rsyslog.d/12-${syslog_tag}.conf" <<-CONFIG
  :syslogtag, isequal, "${syslog_tag}:" -/var/log/${syslog_tag}/service.log
  & ~
CONFIG

  reload rsyslog >/dev/null 2>&1 || true
  logrotate_for "${syslog_tag}" "/var/log/${syslog_tag}/*.log" "reload rsyslog >/dev/null 2>&1 || true"
}

track_path(){
  local path_to_add=${1}

  mkdir -vp $(dirname ${path_to_add})
  [ -f "${path_to_add}" ] || touch ${path_to_add}
  echo "${path_to_add}" >> "${TOGGL_ROLE_FILE_LIST}"
}

upstart_sudo_launcher(){
  local upstart_service_name=${1}
  local user_name=${2}
  local upstart_args=${3:-''}
  local service_name=${4:-"${1}"}
  local sudoers_file="/etc/sudoers.d/${service_name}"
  local stop_start_file="/usr/bin/${service_name}_force_restart"

  for action_name in start status reload restart stop; do
    local launcher_path="/usr/bin/${service_name}_${action_name}"
    save_heredoc_in "${launcher_path}" <<-COMMAND_SCRIPT
#!/bin/sh
/sbin/${action_name} ${upstart_service_name} ${upstart_args}
COMMAND_SCRIPT
    chmod a+x ${launcher_path}
  done


  save_heredoc_in "${stop_start_file}" <<-COMMAND_SCRIPT
#!/bin/sh
(/sbin/stop ${upstart_service_name} ${upstart_args} || true) && /sbin/start ${upstart_service_name} ${upstart_args}
COMMAND_SCRIPT
  chmod a+x ${stop_start_file}


   save_heredoc_in ${sudoers_file} <<-SUDOERS
#check with  visudo -c -f ${sudoers_file}
${user_name} ALL=(ALL) NOPASSWD: /usr/bin/${service_name}_start
${user_name} ALL=(ALL) NOPASSWD: /usr/bin/${service_name}_status
${user_name} ALL=(ALL) NOPASSWD: /usr/bin/${service_name}_reload
${user_name} ALL=(ALL) NOPASSWD: /usr/bin/${service_name}_restart
${user_name} ALL=(ALL) NOPASSWD: /usr/bin/${service_name}_stop
${user_name} ALL=(ALL) NOPASSWD: ${stop_start_file}
SUDOERS

  visudo -c -f ${sudoers_file} || (rm -rvf ${sudoers_file} && echo 'invalid sudoers file' && exit 1)
  chmod 0440 ${sudoers_file}
}

### private stuff, do not call directly.

__finalize(){
  local previous_status=${?}

  if [ ${previous_status} -eq 0 ]; then
    echo "${TOGGL_ROLE_VERSION}" > "${TOGGL_ROLE_VERSION_FILE}"

    [ -f "${TOGGL_ROLE_FILE_LIST}" ] && sort --unique --output="${TOGGL_ROLE_FILE_LIST}" "${TOGGL_ROLE_FILE_LIST}"
    [ -f ${TOGGL_ROLE_NOTIFIER} ] && ${TOGGL_ROLE_NOTIFIER} "${TOGGL_ROLE_NAME} ${PREVIOUS_ROLE_VERSION}->${TOGGL_ROLE_VERSION}"
    exit 0
  else
    [ -f "${TOGGL_ROLE_NOTIFIER}" ] && ${TOGGL_ROLE_NOTIFIER} "Failed to uprade ${TOGGL_ROLE_NAME}  ${PREVIOUS_ROLE_VERSION}->${TOGGL_ROLE_VERSION}"
    exit ${previous_status}
  fi
}

trap __finalize EXIT
