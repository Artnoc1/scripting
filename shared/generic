# Copyright (c) TOGGL LLC
# All rights reserved.
# Published under New BSD license

# Error handling and logging
LOG_FILE_NAME=${LOG_FILE_NAME:-"$(basename $0 .sh).log"}
LOG_LINES_TO_SHOW_ON_ERROR=${LOG_LINES_TO_SHOW_ON_ERROR:-'20'}

set -o pipefail
set -o errtrace
set -o nounset
set -o errexit

exec {FD_STDOUT}>&1
exec {FD_STDERR}>&2

exec >> ${LOG_FILE_NAME} 2>&1

log() {
  echo "$(date) $1"
}

restore_file_descriptors() {
  [ -a "/proc/$$/fd/${FD_STDOUT}" ] && exec 1>&${FD_STDOUT} {FD_STDOUT}>&-
  [ -a "/proc/$$/fd/${FD_STDERR}" ] && exec 2>&${FD_STDERR} {FD_STDERR}>&-
}

err_handler() {
  local exit_status=$?
  restore_file_descriptors
  echo -e "\n\nGot error, showing ${LOG_LINES_TO_SHOW_ON_ERROR} lines of ${LOG_FILE_NAME}:\n" 1>&2
  tail --lines=${LOG_LINES_TO_SHOW_ON_ERROR} ${LOG_FILE_NAME} 1>&2
  exit ${exit_status}
}

trap err_handler ERR
trap restore_file_descriptors EXIT

log "Started $(basename $0)"

# Your code starts here =================================================